// Code generated by vfsgen; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 3, 30, 15, 49, 32, 493033200, time.UTC),
		},
		"/schema.graphql": &vfsgen۰CompressedFileInfo{
			name:             "schema.graphql",
			modTime:          time.Date(2019, 3, 30, 15, 49, 32, 494000000, time.UTC),
			uncompressedSize: 355,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x3d\xae\x83\x30\x10\x84\xfb\x3d\xc5\x9c\x83\xee\x09\x89\xee\x49\x49\x91\x03\x58\x66\x23\x90\xf8\x71\x16\x6f\x81\x22\xee\x1e\xc1\xb2\x0e\x5d\x2a\x7b\xc6\xdf\x8c\x67\x89\x1d\x8f\x01\x6f\x02\x5e\xca\xb2\x56\xb8\xef\x07\x01\xa3\xe6\x90\xfb\x79\xaa\xf0\x7f\xde\x68\x23\xca\x6b\x62\x43\x8e\x4c\xd0\xdc\xcd\x42\x00\x01\x51\x45\x78\x8a\x2b\x11\xf0\xec\x07\x36\x57\x17\x96\xdd\x49\x21\xb1\x94\x06\xaf\x3c\x4a\xa2\x70\xc8\xfc\xe7\x55\x2d\x0f\x7c\x91\x9a\xda\xef\x6b\xa1\x6b\xff\xcc\xf9\x8b\x61\x89\xfa\x32\xc7\x32\x8d\x8d\x32\xfe\x14\xc6\x36\x65\xae\x91\xb7\x63\xac\xa3\xae\x8c\x35\x55\xd0\xc7\xf2\x83\xdc\x3e\x01\x00\x00\xff\xff\x4f\x81\x36\xe4\x63\x01\x00\x00"),
		},
		"/type": &vfsgen۰DirInfo{
			name:    "type",
			modTime: time.Date(2019, 3, 22, 20, 13, 41, 628266200, time.UTC),
		},
		"/type/author.graphql": &vfsgen۰FileInfo{
			name:    "author.graphql",
			modTime: time.Date(2019, 3, 22, 20, 14, 50, 482914100, time.UTC),
			content: []byte("\x74\x79\x70\x65\x20\x41\x75\x74\x68\x6f\x72\x20\x7b\x0a\x20\x20\x69\x64\x3a\x20\x49\x44\x21\x20\x40\x75\x6e\x69\x71\x75\x65\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x53\x74\x72\x69\x6e\x67\x0a\x20\x20\x70\x73\x75\x65\x64\x6f\x6e\x79\x6d\x3a\x20\x42\x6f\x6f\x6c\x65\x61\x6e\x0a\x20\x20\x63\x72\x65\x61\x74\x65\x41\x74\x3a\x20\x44\x61\x74\x65\x54\x69\x6d\x65\x0a\x7d"),
		},
		"/type/currency.graphql": &vfsgen۰FileInfo{
			name:    "currency.graphql",
			modTime: time.Date(2019, 3, 22, 20, 15, 12, 65151700, time.UTC),
			content: []byte("\x74\x79\x70\x65\x20\x43\x75\x72\x72\x65\x6e\x63\x79\x20\x7b\x0a\x20\x20\x69\x64\x3a\x20\x49\x44\x21\x20\x40\x75\x6e\x69\x71\x75\x65\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x53\x74\x72\x69\x6e\x67\x21\x0a\x20\x20\x74\x69\x63\x6b\x65\x72\x3a\x20\x53\x74\x72\x69\x6e\x67\x0a\x20\x20\x63\x72\x65\x61\x74\x65\x41\x74\x3a\x20\x44\x61\x74\x65\x54\x69\x6d\x65\x0a\x7d"),
		},
		"/type/file.graphql": &vfsgen۰CompressedFileInfo{
			name:             "file.graphql",
			modTime:          time.Date(2019, 3, 22, 20, 17, 33, 400988700, time.UTC),
			uncompressedSize: 141,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xbc\x46\x56\x0a\xa5\xd0\xb5\x5e\x20\xd6\x47\x19\x48\x93\x3a\x9d\x09\x88\x78\x77\xc9\x2e\x9b\x07\x0f\x7e\x3e\xfb\x1c\xc4\x2c\x99\xf8\x06\x40\x5e\x11\xcb\x74\xc1\xd5\x8b\xbc\x9d\x01\x58\x6b\xa3\x2e\x7b\xda\x18\x71\x37\x95\xb2\x05\xe0\xf0\xe7\x94\x8c\x11\x7d\x1f\xb2\xf7\xf0\xac\xae\xeb\x18\xb9\xe6\xe1\x35\xea\x29\xb5\x44\xcc\xb9\x26\xeb\xb0\x32\x19\x6f\x36\x20\xbf\x7f\x00\x00\x00\xff\xff\x4e\xb1\xe9\x3e\x8d\x00\x00\x00"),
		},
		"/type/paper.graphql": &vfsgen۰CompressedFileInfo{
			name:             "paper.graphql",
			modTime:          time.Date(2019, 3, 22, 20, 18, 29, 223478400, time.UTC),
			uncompressedSize: 182,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\xaa\xc2\x30\x14\x44\xf7\xf9\x8a\xe9\x6f\x64\xf5\xca\x2b\x0f\xba\x79\x08\xba\x2b\x2e\x42\x3a\xd6\x0b\x6d\x1a\xaf\x37\x60\x11\xff\x5d\xa2\x2e\xdc\x1d\xce\xcc\x30\xb6\x65\x62\x17\x32\x15\x77\x07\xc8\xe8\xd1\x77\x0d\x7e\x4a\x92\x4b\xa1\x03\x42\xb1\xf3\xaa\x1e\x43\xfb\x82\xa3\x03\x62\x51\x65\x8a\x9b\xc7\xf0\xfb\xc1\xaa\x47\x5e\xa3\x4a\x36\x59\x93\xc7\xde\x54\xd2\xe4\x00\xde\x22\x35\xdb\x97\x39\xc9\x4c\x8f\xe1\x4f\x66\xd6\x59\x0e\x13\xff\xcb\xe2\xd1\x27\x73\x80\x89\xd5\xf8\xdd\x6e\xea\x9b\x32\x18\x5b\xf3\xe8\x82\xf1\x20\x0b\xdd\xe3\x19\x00\x00\xff\xff\xb8\x33\x65\xeb\xb6\x00\x00\x00"),
		},
		"/type/user.graphql": &vfsgen۰FileInfo{
			name:    "user.graphql",
			modTime: time.Date(2019, 3, 22, 20, 15, 6, 840216900, time.UTC),
			content: []byte("\x74\x79\x70\x65\x20\x55\x73\x65\x72\x20\x7b\x0a\x20\x20\x69\x64\x3a\x20\x49\x44\x21\x20\x40\x75\x6e\x69\x71\x75\x65\x0a\x20\x20\x65\x6d\x61\x69\x6c\x3a\x20\x53\x74\x72\x69\x6e\x67\x21\x0a\x20\x20\x6e\x61\x6d\x65\x3a\x20\x53\x74\x72\x69\x6e\x67\x21\x0a\x20\x20\x70\x61\x73\x73\x77\x6f\x72\x64\x3a\x20\x53\x74\x72\x69\x6e\x67\x21\x0a\x20\x20\x63\x72\x65\x61\x74\x65\x41\x74\x3a\x20\x44\x61\x74\x65\x54\x69\x6d\x65\x0a\x7d"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schema.graphql"].(os.FileInfo),
		fs["/type"].(os.FileInfo),
	}
	fs["/type"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/type/author.graphql"].(os.FileInfo),
		fs["/type/currency.graphql"].(os.FileInfo),
		fs["/type/file.graphql"].(os.FileInfo),
		fs["/type/paper.graphql"].(os.FileInfo),
		fs["/type/user.graphql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
