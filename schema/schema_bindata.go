// Code generated by go-bindata. DO NOT EDIT.
// sources:
// graphql/schema.graphql
// graphql/type/author.graphql
// graphql/type/currency.graphql
// graphql/type/file.graphql
// graphql/type/paper.graphql
// graphql/type/user.graphql

package schema


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGraphqlSchemagraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x3d\xae\x83\x30\x10\x84\xfb\x3d\xc5\x9c\x83\xee\x09\x89\xee\x49" +
	"\x49\x91\x03\x58\x66\x23\x90\xf8\x71\x16\x6f\x81\x22\xee\x1e\xc1\xb2\x0e\x5d\x2a\x7b\xc6\xdf\x8c\x67\x89\x1d\x8f" +
	"\x01\x6f\x02\x5e\xca\xb2\x56\xb8\xef\x07\x01\xa3\xe6\x90\xfb\x79\xaa\xf0\x7f\xde\x68\x23\xca\x6b\x62\x43\x8e\x4c" +
	"\xd0\xdc\xcd\x42\x00\x01\x51\x45\x78\x8a\x2b\x11\xf0\xec\x07\x36\x57\x17\x96\xdd\x49\x21\xb1\x94\x06\xaf\x3c\x4a" +
	"\xa2\x70\xc8\xfc\xe7\x55\x2d\x0f\x7c\x91\x9a\xda\xef\x6b\xa1\x6b\xff\xcc\xf9\x8b\x61\x89\xfa\x32\xc7\x32\x8d\x8d" +
	"\x32\xfe\x14\xc6\x36\x65\xae\x91\xb7\x63\xac\xa3\xae\x8c\x35\x55\xd0\xc7\xf2\x83\xdc\x3e\x01\x00\x00\xff\xff\x4f" +
	"\x81\x36\xe4\x63\x01\x00\x00")

func bindataGraphqlSchemagraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlSchemagraphql,
		"graphql/schema.graphql",
	)
}



func bindataGraphqlSchemagraphql() (*asset, error) {
	bytes, err := bindataGraphqlSchemagraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/schema.graphql",
		size: 355,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553960972, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGraphqlTypeAuthorgraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\xc2\x40\x0c\x05\xd0\xde\x53\x7c\xd6\xb8\x8a\xa0\x34\xd4" +
	"\xb0\x80\x45\xbe\xc0\x12\x67\x87\xc3\x2e\x4e\x88\xdd\xf3\x72\xee\xc4\x52\xf9\x8a\x81\x9f\x00\xb6\x35\x5c\xd7\x13" +
	"\xce\xe5\xf6\x29\x0a\xe0\xda\xd9\x70\xcb\x61\xfe\x14\x60\xff\x16\xb7\xf0\xd9\x1b\x2e\x11\x6f\xaa\x0b\xf0\x18\xd4" +
	"\xe4\x92\x0d\xab\x26\xef\xd6\x29\xff\x23\x00\x00\xff\xff\x20\xe0\xbd\x17\x5a\x00\x00\x00")

func bindataGraphqlTypeAuthorgraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlTypeAuthorgraphql,
		"graphql/type/author.graphql",
	)
}



func bindataGraphqlTypeAuthorgraphql() (*asset, error) {
	bytes, err := bindataGraphqlTypeAuthorgraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/type/author.graphql",
		size: 90,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553285690, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGraphqlTypeCurrencygraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\x31\x0a\xc3\x30\x0c\x05\xd0\x5d\xa7\xf8\xbe\x86\xa7\x96\x7a\xe9" +
	"\xdc\x5e\xc0\x38\x9f\x20\x82\x45\x22\xe4\xc1\x84\xdc\x3d\x53\xd6\x17\x73\x27\x3e\xc3\x9d\xd6\x26\x4e\x01\x74\xc9" +
	"\xf8\x96\x84\xd7\x30\x3d\x06\x05\xb0\xda\x99\xf1\x0b\x57\x5b\x93\x00\xa1\x6d\xa3\x3f\x22\x40\x73\xd6\xe0\x3b\x32" +
	"\x4a\x0d\xfe\xb5\x53\xae\x3b\x00\x00\xff\xff\xea\xab\xdf\xb7\x59\x00\x00\x00")

func bindataGraphqlTypeCurrencygraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlTypeCurrencygraphql,
		"graphql/type/currency.graphql",
	)
}



func bindataGraphqlTypeCurrencygraphql() (*asset, error) {
	bytes, err := bindataGraphqlTypeCurrencygraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/type/currency.graphql",
		size: 89,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553285712, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGraphqlTypeFilegraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xbc\x46\x56\x0a\xa5\xd0" +
	"\xb5\x5e\x20\xd6\x47\x19\x48\x93\x3a\x9d\x09\x88\x78\x77\xc9\x2e\x9b\x07\x0f\x7e\x3e\xfb\x1c\xc4\x2c\x99\xf8\x06" +
	"\x40\x5e\x11\xcb\x74\xc1\xd5\x8b\xbc\x9d\x01\x58\x6b\xa3\x2e\x7b\xda\x18\x71\x37\x95\xb2\x05\xe0\xf0\xe7\x94\x8c" +
	"\x11\x7d\x1f\xb2\xf7\xf0\xac\xae\xeb\x18\xb9\xe6\xe1\x35\xea\x29\xb5\x44\xcc\xb9\x26\xeb\xb0\x32\x19\x6f\x36\x20" +
	"\xbf\x7f\x00\x00\x00\xff\xff\x4e\xb1\xe9\x3e\x8d\x00\x00\x00")

func bindataGraphqlTypeFilegraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlTypeFilegraphql,
		"graphql/type/file.graphql",
	)
}



func bindataGraphqlTypeFilegraphql() (*asset, error) {
	bytes, err := bindataGraphqlTypeFilegraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/type/file.graphql",
		size: 141,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553285853, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGraphqlTypePapergraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\xaa\xc2\x30\x14\x44\xf7\xf9\x8a\xe9\x6f\x64\xf5\xca\x2b\x0f" +
	"\xba\x79\x08\xba\x2b\x2e\x42\x3a\xd6\x0b\x6d\x1a\xaf\x37\x60\x11\xff\x5d\xa2\x2e\xdc\x1d\xce\xcc\x30\xb6\x65\x62" +
	"\x17\x32\x15\x77\x07\xc8\xe8\xd1\x77\x0d\x7e\x4a\x92\x4b\xa1\x03\x42\xb1\xf3\xaa\x1e\x43\xfb\x82\xa3\x03\x62\x51" +
	"\x65\x8a\x9b\xc7\xf0\xfb\xc1\xaa\x47\x5e\xa3\x4a\x36\x59\x93\xc7\xde\x54\xd2\xe4\x00\xde\x22\x35\xdb\x97\x39\xc9" +
	"\x4c\x8f\xe1\x4f\x66\xd6\x59\x0e\x13\xff\xcb\xe2\xd1\x27\x73\x80\x89\xd5\xf8\xdd\x6e\xea\x9b\x32\x18\x5b\xf3\xe8" +
	"\x82\xf1\x20\x0b\xdd\xe3\x19\x00\x00\xff\xff\xb8\x33\x65\xeb\xb6\x00\x00\x00")

func bindataGraphqlTypePapergraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlTypePapergraphql,
		"graphql/type/paper.graphql",
	)
}



func bindataGraphqlTypePapergraphql() (*asset, error) {
	bytes, err := bindataGraphqlTypePapergraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/type/paper.graphql",
		size: 182,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553285909, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataGraphqlTypeUsergraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc8\x31\x0a\x02\x30\x0c\x05\xd0\x3d\xa7\xf8\xbd\x46\x27\x85\x2e\xce" +
	"\xea\x01\x82\xfd\x48\xc0\xd6\x9a\xa6\x88\x88\x77\x77\xed\xf8\x5e\x7c\x06\x71\x9d\x74\x7c\x05\xb0\x9a\x71\x2a\x09" +
	"\x87\xd5\xed\xb5\x28\x00\x9b\xda\x23\xe3\x1c\x6e\xfd\x9e\x04\xe8\xda\xb8\x7b\xe8\x9c\xef\xa7\xd7\xfd\x6e\x4e\x0d" +
	"\x1e\x23\xa3\x68\xf0\x62\x8d\xf2\xfb\x07\x00\x00\xff\xff\x63\xa9\xef\xa6\x69\x00\x00\x00")

func bindataGraphqlTypeUsergraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataGraphqlTypeUsergraphql,
		"graphql/type/user.graphql",
	)
}



func bindataGraphqlTypeUsergraphql() (*asset, error) {
	bytes, err := bindataGraphqlTypeUsergraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "graphql/type/user.graphql",
		size: 105,
		md5checksum: "",
		mode: os.FileMode(511),
		modTime: time.Unix(1553285706, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"graphql/schema.graphql":        bindataGraphqlSchemagraphql,
	"graphql/type/author.graphql":   bindataGraphqlTypeAuthorgraphql,
	"graphql/type/currency.graphql": bindataGraphqlTypeCurrencygraphql,
	"graphql/type/file.graphql":     bindataGraphqlTypeFilegraphql,
	"graphql/type/paper.graphql":    bindataGraphqlTypePapergraphql,
	"graphql/type/user.graphql":     bindataGraphqlTypeUsergraphql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"graphql": {Func: nil, Children: map[string]*bintree{
		"schema.graphql": {Func: bindataGraphqlSchemagraphql, Children: map[string]*bintree{}},
		"type": {Func: nil, Children: map[string]*bintree{
			"author.graphql": {Func: bindataGraphqlTypeAuthorgraphql, Children: map[string]*bintree{}},
			"currency.graphql": {Func: bindataGraphqlTypeCurrencygraphql, Children: map[string]*bintree{}},
			"file.graphql": {Func: bindataGraphqlTypeFilegraphql, Children: map[string]*bintree{}},
			"paper.graphql": {Func: bindataGraphqlTypePapergraphql, Children: map[string]*bintree{}},
			"user.graphql": {Func: bindataGraphqlTypeUsergraphql, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
